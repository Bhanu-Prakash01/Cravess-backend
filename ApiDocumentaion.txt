Authentication Routes

This API provides two endpoints for user authentication.

1. Send OTP
Endpoint: /sendotp Method: POST

Description: Sends a One-Time Password (OTP) to the user's registered mobile number or email.

Request Body:

No request body is required for this endpoint.
Response:

A success response with a message indicating that the OTP has been sent successfully.
An error response with a m



// Process each item and apply offer
const processedItems = await Promise.all(
  items.map(async (item) => {
    let finalItemPrice = item.price;
    if (item?.offer && item.offer !== null) {
      const offer = await Offer.findById(item.offer);
      if (offer) {
        const itemDiscount = (item.price * offer.discountPercentage) / 100;
        finalItemPrice -= itemDiscount;
      }
    }
    totalPrice += finalItemPrice * item.quantity;
    return {
      ...item,
      finalItemPrice,
    };
  })
);

try {
    // Handle restaurant rating
    if (restaurantId) {
        const restaurantRatings = await RestaurantDetails.findOne({ _id: restaurantId });
        const ratings = restaurantRatings.ratingAndReview;
        console.log(ratings, "ratings", ratings.length, "ratings.length");

        const isFirstRestaurantRating = ratings?.length < 1; // Check if it's the first review
        const totalRatings = isFirstRestaurantRating
            ? rating // First review sets the current rating directly
            : ratings?.reduce((acc, review) => acc + review.rating, 0) + rating; // Include current rating in total

        const averageRestaurantRating = totalRatings / (ratings?.length + 1); // Add 1 for the current review
        console.log(averageRestaurantRating, "averageRestaurantRating");

        await RestaurantDetails.findByIdAndUpdate(
            restaurantId,
            {
                $set: { current_rating: averageRestaurantRating },
                $push: { ratingAndReview: { _id: newReview._id, rating } },
            },
            { new: true }
        );
    }

    // Handle delivery agent rating
    if (deliveryAgentId) {
        console.log(deliveryAgentId, "deliveryAgentId");
        const deliveryAgentRatings = await DeliveryAgent.findOne({ _id: deliveryAgentId });
        const ratings = deliveryAgentRatings.ratingAndReview;
        console.log(ratings, "ratings");

        const isFirstDeliveryAgentRating = ratings?.length < 1; // Check if it's the first review
        const totalRatings = isFirstDeliveryAgentRating
            ? rating // First review sets the current rating directly
            : ratings?.reduce((acc, review) => acc + review.rating, 0) + rating; // Include current rating in total

        const averageDeliveryAgentRating = totalRatings / (ratings?.length + 1); // Add 1 for the current review
        console.log(averageDeliveryAgentRating, "averageDeliveryAgentRating");

        await DeliveryAgent.findByIdAndUpdate(
            deliveryAgentId,
            {
                $set: { current_rating: averageDeliveryAgentRating },
                $push: { ratingAndReview: { _id: newReview._id, rating } },
            },
            { new: true }
        );
    }
} catch (error) {
    console.error(error);
    return res.status(500).json({ error: 'Error updating restaurant or delivery agent document' });
}




























+
essage indicating the reason for failure.
2. Sign In
Endpoint: /signin Method: POST

Description: Authenticates the user using the OTP sent to their registered mobile number or email.

Request Body:

otp: The One-Time Password received by the user.
phoneNumber or email: The user's registered mobile number or email.
Response:

A success response with a JSON Web Token (JWT) for authenticated users.
An error response with a message indicating the reason for failure.
Note:

The sendOtp and userAuth functions are implemented in the authController module.
The API expects the request body to be in JSON format.
The API returns responses in JSON format.
Error responses may include additional information about the error, such as an error code or message.